#!/usr/bin/env node
let format="text",nsRegEx=new RegExp(".*","u"),delimiter=",",spacer=2;const params=[];process.argv.forEach((t,o)=>{o>1&&(t.toLowerCase().startsWith("--collection=")?nsRegEx=new RegExp(t.substr(13),"u"):t.toLowerCase().startsWith("--delimiter=")?delimiter=t.substr(12):t.toLowerCase().startsWith("--spacer=")?spacer=Number.parseInt(t.substr(9)):"--help"===t.toLowerCase()?(console.log("Usage:\n  mongotopx <options> <polling interval in seconds>\n\nmongotopx is a wrapper for mongotop for better collection filtering and\noutput.\n\nmongotopx provides a method to track the amount of time a MongoDB\ninstance mongod spends reading and writing data. mongotopx provides\nstatistics on a per-collection level. By default, mongotopx returns\nvalues every second.\n\nfiltering options:\n      --collection=<regex>\n        regular expression to filter collections\n\ngeneral options:\n      --help\n        print usage\n\n      --version\n        print the tool version and exit\n\noutput options:\n      --csv\n        format output as CSV\n\n      --json\n        format output as JSON\n\n      --text\n        format output as text\n\n      --xml\n        format output as XML\n\n      --delimiter=<string>\n        delimeter for CSV format\n\n      --spacer=<number>\n        the number of space characters to use to indent JSON and XML\n\n      --locks\n        report on use of per-database locks\n\n  -n, --rowcount=<count>\n        number of stats lines toprint (0 for indefinite)\n\nconnection options:\n  -h, --host=<hostname>\n        mongodb host(s) to connect to (use commas to delimit hosts)\n\n      --port=<port>\n        server port (can also use --host hostname:port)\n\nssl options:\n      --ssl\n        connect to a mongod or mongosthat has ssl enabled\n\n      --sslCAFile=<filename>\n        the .pem file containing the root certificate chain from\n        the certificate authority\n\n      --sslPEMKeyFile=<filename>\n        the .pem file containing the certificate and key\n\n      --sslPEMKeyPassword=<password>\n        the password to decrypt the sslPEMKeyFile, if necessary\n\n      --sslCRLFile=<filename>\n        the .pem file containing the certificate revocation list\n\n      --sslAllowInvalidCertificates\n        bypass the validation for server certificates\n\n      --sslAllowInvalidHostnames\n        bypass the validation for server name\n\n      --sslFIPSMode\n        use FIPS mode of the installed openssl library\n\nauthentication options:\n  -u, --username=<username>\n        username for authentication\n\n  -p, --password=<password>\n        password for authentication\n\n      --authenticationDatabase=<database-name>\n        database that holds the user's credentials\n\n      --authenticationMechanism=<mechanism>\n        authentication mechanism to use\n\nkerberos options:\n      --gssapiServiceName=<service-name>\n        service name to use when authenticating using GSSAPI/Kerberos\n        (default: mongodb)\n\n      --gssapiHostName=<host-name>\n        hostname to use when authenticating using GSSAPI/Kerberos\n        (default: <remote server's address>)\n\nuri options:\n      --uri=mongodb-uri\n        mongodb uri connection string\n\nSee https://github.com/anars/mongodb-dba-tools/ for more information.\n"),process.exit(0)):"--version"===t.toLowerCase()?(console.log('MongoDB Database Administrators\' Tools version 4.2.3 by Kay AnarCopyright (c) 2020 Anar Software LLC http://anars.com\nPermission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the"Software"), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:\nThe above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'),process.exit(0)):"--json"===t.toLowerCase()?format="json":"--csv"===t.toLowerCase()?format="csv":"--xml"===t.toLowerCase()?format="xml":"--text"===t.toLowerCase()?format="text":t.toLowerCase().startsWith("--verbose")||t.toLowerCase().startsWith("-v")||params.push(t))}),0===param.length&&(console.log("MongoDB Database Administrators' Tools version 4.2.3 by Kay AnarCopyright (c) 2020 Anar Software LLC http://anars.com\n\nUse --help parameter for usage."),process.exit(0));let firstRow=!0;const keys=[],dumpCSV=function(t){if(firstRow){keys.length=0;const o=["timestamp"];for(const e in t.totals)Reflect.has(t.totals,e)&&(keys.push(e),o.push(`${e} (total time)`),o.push(`${e} (total count)`),o.push(`${e} (read time)`),o.push(`${e} (read count)`),o.push(`${e} (write time)`),o.push(`${e} (write count)`));console.log(o.join(delimiter)),firstRow=!1}const o=[`${t.time}`];keys.forEach(e=>{o.push(t.totals[e].total.time),o.push(t.totals[e].total.count),o.push(t.totals[e].read.time),o.push(t.totals[e].read.count),o.push(t.totals[e].write.time),o.push(t.totals[e].write.count)}),console.log(o.join(delimiter))},dumpJSON=function(t){firstRow?(console.log(`[\n${JSON.stringify(t,null,spacer)}`),firstRow=!1):console.log(`,\n${JSON.stringify(t,null,spacer)}`)},dumpXML=function(t){firstRow&&(console.log('<?xml version="1.0" encoding="UTF-8"?>\n<top>'),firstRow=!1),console.log(`${"".padStart(spacer," ")}<totals timestamp="${t.time}">`);for(const o in t.totals)Reflect.has(t.totals,o)&&console.log(`${"".padStart(2*spacer," ")}<collection name="${o}" total-time="${t.totals[o].total.time}" total-count="${t.totals[o].total.count}" read-time="${t.totals[o].read.time}" read-count="${t.totals[o].read.count}" write-time="${t.totals[o].write.time}" write-count="${t.totals[o].write.count}"/>`);console.log(`${"".padStart(spacer," ")}</totals>`)},dumpText=function(t){console.log(`${t.time.padStart(spacer," ")}${"total (time)".padStart(16," ")}${"total (count)".padStart(16," ")}${"read (time)".padStart(16," ")}${"read (count)".padStart(16," ")}${"write (time)".padStart(16," ")}${"write (count)".padStart(16," ")}`);for(const o in t.totals)Reflect.has(t.totals,o)&&console.log(`${o.padStart(spacer," ")}${t.totals[o].total.time.toString().padStart(16," ")}${t.totals[o].total.count.toString().padStart(16," ")}${t.totals[o].read.time.toString().padStart(16," ")}${t.totals[o].read.count.toString().padStart(16," ")}${t.totals[o].write.time.toString().padStart(16," ")}${t.totals[o].write.count.toString().padStart(16," ")}`)},{spawn:spawn}=require("child_process"),mongotop=spawn("mongotop",[...params,"--quiet","--json"]);mongotop.stdout.on("data",t=>{const o=JSON.parse(t);"text"===format&&(spacer=0);for(const t in o.totals)Reflect.has(o.totals,t)&&(nsRegEx.test(t)?("text"===format&&t.length>spacer&&(spacer=t.length),"text"===format&&o.time.length>spacer&&(spacer=o.time.length)):delete o.totals[t]);"csv"===format?dumpCSV(o):"json"===format?dumpJSON(o):"xml"===format?dumpXML(o):"text"===format&&dumpText(o)}),mongotop.stderr.on("data",t=>{console.error(`${t}`)}),mongotop.on("error",t=>{console.error('An error occurred while running "mongotop". Pleae check that it\'s installed and working correctly.')}),mongotop.on("close",t=>{0!==t?console.error(`Error : ${t}`):"json"===format?console.log("]"):"xml"===format&&console.log("</top>")});